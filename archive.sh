#!/bin/bash

# Prints the usage instructions when the -h flag is used:
help_info() {
    echo
    echo "Overview:"
    echo "This script can be used to create a backup .tar.gz archive of a given source_directory, in the specified target_directory."
    echo "You may instead choose to create a backup of the default source/target directories, as specified by the archive.conf configuration file."
    echo "If the target_directory does not already exist during execution, the script will create it."
    echo 
    echo "This script can instead be run in dry-run mode, which displays the items that WOULD be backed up, without performing an actual backup."
    echo
    echo "You can view the INFO and ERROR logs generated by this script in the archive.log file, which should be created in"
    echo "your current directory if it doesn't already exist at runtime.  These logs are also printed to the terminal."
    echo
    echo "Usage format:"
    echo "$0 <source_directory> <target_directory>        Runs the script using the given source_directory and target_directory."
    echo "$0                                              Runs the script using the default source_directory and target_directory specified in archive.conf"
    echo
    echo "Arguments:"
    echo " - source_directory:  The path to the folder we will make a backup of."
    echo " - target_directory:  The path to the folder where the backup will be stored."
    echo
    echo "Options:"
    echo " - -h         Show this help message and exit (This flag must be the first argument)."
    echo " - -d         Executes the script in dry-run mode (This flag must be the first argument if no"
    echo "              source_directory and target_directory are given, and the third argument if they are given)."
    echo
    echo "Configuration file:"
    echo "By default, the source_directory is set to './default_source' and the target_directory to './default_target' in the archive.conf file."
    echo "Feel free to change the default source_directory and target_directory in the archive.conf file to whatever you'd like."
    echo
    echo "Exclusion file:"
    echo "You may add file patterns to the .bassignore file to exclude certain files from the backup process."
    echo " - Example: The pattern '*.log' would exclude all log files."
    echo
}

# Takes a log as input, and both prints it to the terminal and records it in the archive.log file with a timestamp:
create_log() {
    local LOG_TYPE="$1"
    local LOG_MESSAGE="$2"
    local LOG_TIMESTAMP=$(date +"%m/%d/%Y %H:%M:%S")

    local LOG="$LOG_TYPE: [$LOG_TIMESTAMP] $LOG_MESSAGE"
    
    # Depending on the LOG_TYPE, we print the log to stdout (INFO) or stderr (ERROR):
    if [[ "$LOG_TYPE" == "INFO" ]]; then
        echo "$LOG"
    else
        echo "$LOG" >&2
    fi

    # We then print the log to archive.log:
    echo "$LOG" >> "$LOG_FILE"
}

# Handles the -h flag (Help):
if [[ "$1" == "-h" ]]; then
    help_info
    exit 0
fi

# We create a log file in the current directory to record all the logs generated during execution:
LOG_FILE="./archive.log"
create_log "INFO" "archive script started."

DRY_RUN="false"

# We use the source_directory and target_directory arguments given by the user:
if [[ $# -ge 2 ]]; then
    SOURCE="$1"
    TARGET="$2"

    # Handles the -d flag (Dry run):
    if [[ "$3" == "-d" ]]; then
        DRY_RUN="true"
    fi

# If these arguments were not given, we instead use the default values in archive.conf:
else
    CONFIG_FILE="./archive.conf"
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        
        # Handles the -d flag (Dry run):
        if [[ "$1" == "-d" ]]; then
            DRY_RUN="true"
        fi

    else
        create_log "ERROR" "Configuration file ($CONFIG_FILE) not found."
        exit 1
    fi
fi

# Checks if the source_directory exists:
if [[ ! -d "$SOURCE" ]]; then
    create_log "ERROR" "Source directory ($SOURCE) does not exist or is not readable. Exiting."
    exit 1
fi

# Checks if the target_directory exists.  If not, we attempt to create it:
if [[ ! -d "$TARGET" ]]; then
    mkdir -p "$TARGET"

    if [[ ! -d "$TARGET" ]]; then
        create_log "ERROR" "Target directory ($TARGET) does not exist or could not be created. Exiting."
        exit 1
    fi
fi

# We create a .tar.gz archive in the target_directory with the current timestamp:
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
ARCHIVE="$TARGET/backup_$TIMESTAMP.tar.gz"

EXCLUDE_FILE="./.bassignore"

# Finally, we copy the files from source_directory into this new .tar.gz archive:

# Performing a dry-run of a backup:
if [[ $DRY_RUN == "true" ]]; then
    create_log "INFO" "Dry-run enabled. Simulating backup."
    create_log "INFO" "Backing up from $SOURCE to $ARCHIVE."

    # If the exclusion file .bassignore is detected, we incorporate it into the tar command:
    if [[ -f "$EXCLUDE_FILE" ]]; then
        # This line creates a compressed tar as normal, but instead of placing it in ARCHIVE we immediately decompress it and list its contents!
        if tar -czf - -C "$SOURCE" . --exclude-from="$EXCLUDE_FILE" | tar -tzf -; then
            create_log "INFO" "Dry-run backup completed successfully."
            exit 0
        else
            create_log "ERROR" "Dry-run backup failed during compression."
            exit 1
        fi

    else
        # This line creates a compressed tar as normal, but instead of placing it in ARCHIVE we immediately decompress it and list its contents!
        if tar -czf - -C "$SOURCE" . | tar -tzf -; then
            create_log "INFO" "Dry-run backup completed successfully."
            exit 0
        else
            create_log "ERROR" "Dry-run backup failed during compression."
            exit 1
        fi
    fi

# Performing a backup normally:
else
    create_log "INFO" "Backing up from $SOURCE to $ARCHIVE."

    # If the exclusion file .bassignore is detected, we incorporate it into the tar command:
    if [[ -f "$EXCLUDE_FILE" ]]; then
        if tar -czf "$ARCHIVE" -C "$SOURCE" . --exclude-from="$EXCLUDE_FILE"; then
            create_log "INFO" "Backup completed successfully."
            exit 0
        else
            create_log "ERROR" "Backup failed during compression."
            exit 1
        fi
    
    else
        if tar -czf "$ARCHIVE" -C "$SOURCE" .; then
            create_log "INFO" "Backup completed successfully."
            exit 0
        else
            create_log "ERROR" "Backup failed during compression."
            exit 1
        fi
    fi
fi


